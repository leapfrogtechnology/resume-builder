@if variable-exists(font-url--google) {
  @import url($font-url--google);
}

//Calculate rem values
@function rem($size) {
  @return ($size/$base__font-size) * 1rem;
}

//Calculate %age values
@function pntg($target, $context) {
  @return ($target/$context) * 100%;
}

//Mixins
@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background: $color;
    }
  }
}

//BEM(Block Element Modifier) Naming Convention
//For Element
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

//For Modifiers
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries -- please use this one
@mixin for-size($break) {
  @if $break== "small" {
    @media (min-width: $small) {
      // browser width >= 600px
      @content;
    }
  } @else if $break== "medium" {
    @media (min-width: $medium) {
      // 800 px > browser width >= 600 px
      @content;
    }
  } @else if $break== "large" {
    @media (min-width: $large) {
      // browser width >= 800px
      @content;
    }
  } @else if $break== "extra-large" {
    @media (min-width: $extra-large) {
      // browser width >= 800px
      @content;
    }
  } @else {
    @if (type-of($break) == "number") {
      @media (min-width: $break + "px") {
        // browser width >= given breakpoint in number
        @content;
      }
    } @else {
      @error "No value could be retrieved for '#{$break}'";
    }
  }
}

// Media queries for both min-width and min-height
@mixin for-sizes($width, $height) {
  @if (type-of($width) == "number" and type-of($height) == "number") {
    @media (min-width: $width + "px") and (min-height: $height + "px") {
      // browser width >= given breakpoint in number and
      // browser height >= given breakpoint in number
      @content;
    }
  }
}

//Hover Mixin
@mixin hover {
  &:hover,
  &:active {
    @content;
  }
}

//focus mixin{
@mixin focus {
  &:focus {
    @content;
  }
}

@mixin ellipsis($width) {
  @extend %ellipsis;
  width: $width;
}

//Turn px in rem with px fallback
@mixin rem($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

//Pseudo-elements
@mixin psuedo-el($el, $el-width: null, $el-height: null) {
  @if $el== ":before" or $el== "after" {
    &:#{$el} {
      @extend %pseudos;
      width: $el-width;
      height: $el-height;
      @content;
    }
  } @else {
    @warn "#{$el} is not a valid pseudo-element";
  }
}

//Set Background
@mixin bg($img, $repeat: no-repeat, $position: 0 0, $size: cover) {
  background-image: url("#{$path--rel}/#{$img}");
  background-repeat: $repeat;
  background-position: $position;
  background-size: $size;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}
